{"version":3,"sources":["components/submit.component.jsx","components/header.component.jsx","components/todo.component.jsx","components/todolist.component.jsx","App.jsx","serviceWorker.js","index.js"],"names":["SubmitForm","state","term","handleSubmit","e","preventDefault","props","onFormSubmit","setState","className","onSubmit","this","type","placeholder","value","onChange","target","React","Component","Header","numTodos","Todo","onDoubleClick","onDelete","id","content","TodoList","todos","tasks","map","todo","index","key","App","task","handleDelete","newArr","splice","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yOA6BeA,E,4MA1BbC,MAAQ,CAAEC,KAAM,I,EAEhBC,aAAe,SAACC,GACdA,EAAEC,iBACsB,KAApB,EAAKJ,MAAMC,OACf,EAAKI,MAAMC,aAAa,EAAKN,MAAMC,MACnC,EAAKM,SAAS,CAAEN,KAAM,O,uDAGd,IAAD,OACP,OACE,yBAAKO,UAAU,QACb,0BAAMC,SAAUC,KAAKR,cACnB,2BACES,KAAK,OACLH,UAAU,QACVI,YAAY,aACZC,MAAOH,KAAKV,MAAMC,KAClBa,SAAU,SAACX,GAAD,OAAO,EAAKI,SAAS,CAAEN,KAAME,EAAEY,OAAOF,iB,GAnBnCG,IAAMC,WCadC,EATF,SAACb,GACZ,OACE,yBAAKG,UAAU,eACb,wBAAIA,UAAU,4BAAd,YACYH,EAAMc,SADlB,YCCSC,EARJ,SAACf,GACV,OACE,yBAAKgB,cAAe,WAAOhB,EAAMiB,SAASjB,EAAMkB,KAAMf,UAAU,aAC7DH,EAAMmB,UCYEC,EAZA,SAACpB,GACd,IAAMqB,EAAQrB,EAAMsB,MAAMC,KAAI,SAACC,EAAMC,GACnC,OAAO,kBAAC,EAAD,CAAMN,QAASK,EAAME,IAAKD,EAAOP,GAAIO,EAAOR,SAAUjB,EAAMiB,cAErE,OACE,yBAAKd,UAAU,gBACZkB,IC4BMM,G,kNA5BbhC,MAAQ,CACN2B,MAAO,I,EAITzB,aAAe,SAAA+B,GACb,EAAK1B,SAAS,CAACoB,MAAM,GAAD,mBAAM,EAAK3B,MAAM2B,OAAjB,CAAwBM,O,EAG9CC,aAAe,SAACJ,GACd,IAAMK,EAAM,YAAO,EAAKnC,MAAM2B,OAC9BQ,EAAOC,OAAON,EAAO,GACrB,EAAKvB,SAAS,CAACoB,MAAOQ,K,uDAItB,OACE,yBAAK3B,UAAU,WACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CAAQW,SAAUT,KAAKV,MAAM2B,MAAMU,SACnC,kBAAC,EAAD,CAAUV,MAAOjB,KAAKV,MAAM2B,MAAOL,SAAUZ,KAAKwB,eAClD,kBAAC,EAAD,CAAY5B,aAAcI,KAAKR,qB,GAtBvBc,IAAMC,YCEJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2e3aeb66.chunk.js","sourcesContent":["import React from \"react\";\n\nclass SubmitForm extends React.Component {\n  state = { term: \"\" };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (this.state.term === \"\") return;\n    this.props.onFormSubmit(this.state.term);\n    this.setState({ term: \"\" });\n  };\n\n  render() {\n    return (\n      <div className=\"form\">\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            className=\"input\"\n            placeholder=\"Enter Item\"\n            value={this.state.term}\n            onChange={(e) => this.setState({ term: e.target.value })}\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SubmitForm;\n","import React from 'react'\n\n\n\n\n\nconst Header = (props) => {\n    return(\n      <div className='card-header'>\n        <h1 className='card-header-title header'>\n          You have {props.numTodos} Todos\n        </h1>\n      </div>\n    )\n  }\n  export default Header","import React from 'react'\n\nconst Todo = (props) => {\n    return(\n      <div onDoubleClick={() => {props.onDelete(props.id)}} className='list-item'>\n        {props.content}\n      </div>\n    );\n  }\n\n  export default Todo","import React from 'react'\nimport Todo from \"./todo.component\"\n\n\n\nconst TodoList = (props) => {\n    const todos = props.tasks.map((todo, index) => {\n      return <Todo content={todo} key={index} id={index} onDelete={props.onDelete} />\n    })\n    return( \n      <div className='list-wrapper'>\n        {todos}\n      </div>\n    );\n  }\n  \n  \n  export default TodoList","import React from \"react\"\n\nimport SubmitForm from \"./components/submit.component\"\nimport Header from \"./components/header.component\"\nimport TodoList from \"./components/todolist.component\"\n\n\nimport \"./App.css\"\n\n\nclass App extends React.Component {\n  state = {\n    tasks: []\n  };\n  \n  \n  handleSubmit = task => {\n    this.setState({tasks: [...this.state.tasks, task]});\n  }\n  \n  handleDelete = (index) => {\n    const newArr = [...this.state.tasks];\n    newArr.splice(index, 1);\n    this.setState({tasks: newArr});\n  }\n\n  render() {\n    return(\n      <div className='wrapper'>\n        <div className='card frame'>\n          <Header numTodos={this.state.tasks.length} />\n          <TodoList tasks={this.state.tasks} onDelete={this.handleDelete} />\n          <SubmitForm onFormSubmit={this.handleSubmit} />\n        </div>\n      </div>\n    );\n  } \n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}